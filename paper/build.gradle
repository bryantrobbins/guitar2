import org.apache.commons.io.IOUtils
import org.apache.commons.io.FileUtils
import static com.xlson.groovycsv.CsvParser.parseCsv

// Load properties or defaults
def baseVal = hasProperty('base') ? base : 'example'
def csvDataVal = hasProperty('csvData') ? csvData : ''
def captionVal = hasProperty('caption') ? caption : ''
def outputVal = hasProperty('output') ? output : ''
def useStarVal = hasProperty('useStar') ? true : false
def imageVal = hasProperty('image') ? image : ''
def heightVal = hasProperty('height') ? height : ''
def widthVal = hasProperty('width') ? width : ''
def scaleVal = hasProperty('scale') ? scale : ''
def rscriptVal = hasProperty('rscript') ? rscript : ''

buildscript {
	repositories {
		mavenCentral()
	}

	dependencies {
		classpath 'com.github.docker-java:docker-java:1.2.0'
		classpath 'commons-io:commons-io:2.4'
		classpath 'com.xlson.groovycsv:groovycsv:1.0'
	}
}

// Commands
def latexCmd = "pdflatex ${baseVal}.tex"
def bibtexCmd = "bibtex ${baseVal}"
def rscriptCmd = "R CMD BATCH --slave ${rscriptVal} ${outputVal}"
def debugCmd = "ls -ltr"

def deleteFile(file){
	new File(file).delete()
}

def doCmd(cmd){
	def sout = new StringBuilder(), serr = new StringBuilder()
	def proc = cmd.execute()
	proc.consumeProcessOutput(sout, serr)
	proc.waitForProcessOutput()
	println "=BEGIN STANDARD OUT="
	println sout
	println "===END STANDARD OUT==="
	println "=BEGIN STANDARD ERROR="
	println serr
	println "==END STANDARD ERROR=="
}

def deletePaperFiles(base){
	deleteFile("${base}.log")	
	deleteFile("${base}.aux")	
	deleteFile("${base}.blg")	
	deleteFile("${base}.bbl")	
	deleteFile("${base}.pdf")	
}

def getInlineProperty(prop, value, first){
	def ret = ""

	if(!value.isEmpty()){
		if(!first){
			ret += ", "	
		}
		ret += "${prop}=${value}"
	}

	ret
}

task cleanAll <<
{
	// Remove temp build files
	new File('build').deleteDir()

	// Remove temp paper files
	deletePaperFiles()
}

task singleFile << {
	def input = FileUtils.readFileToString(new File(source))
	def regex = /\\input\{(.+)\}/
	def matcher = ( input  =~ regex )
	while(matcher.size() > 0){
		def repl = FileUtils.readFileToString(new File("${matcher[0][1]}.tex"))
		input = input.replace(matcher[0][0], repl)
		matcher = ( input  =~ regex )
	}

	FileUtils.writeStringToFile(new File("${baseVal}.tex"), input)
}

task buildPaper (dependsOn: singleFile) <<
{
	// Execute Latex Cmd
	doCmd(latexCmd)

	// Execute BibTex Cmd
	//doCmd(bibtexCmd)

	// Execute LaTex Cmd
	//doCmd(latexCmd)

	// Execute LaTex Cmd
	//doCmd(latexCmd)
}

task generateTable <<
{
	def output = new StringBuffer()
	
	// Read csv data
	def csv = FileUtils.readFileToString(new File(csvDataVal))
	
	// Parse csv data
	def data = parseCsv(csv, autoDetect:true)
	def numColumns = data.columns.size()

	// Prepare alignment
	def align = "|"
	numColumns.downto(1){
		align += "c"
		align += "|"
	}

	// Prepare wrapper keyword
	def wrapper = "table"
	if(useStarVal){
		wrapper += "*"
	}

	// Print table content
	output << "\\begin{${wrapper}}\n"
	output << "\\centering\n"
	output << "\\caption{${captionVal}}\n"

	output << "\\begin{tabular}{${align}} \\hline\n"

	for(line in data) {
		def oneRow = line[0]
		for(int i =1; i<numColumns; i++){
			oneRow += "\t&\t"
			oneRow += line[i]
		}
		oneRow += "\\\\"
		oneRow += "\\hline\n"
		output << oneRow
	}

	output << "\\hline\\end{tabular}\n"
	output << "\\end{${wrapper}}\n"
	
	println output.toString()
	
	if(!outputVal.equals('')){
		FileUtils.writeStringToFile(new File(outputVal), output.toString());
	}

}

task generateFigure << {
	def output = new StringBuffer()
	def wrapper = "figure"
	def firstProp = true

	if(useStarVal){
		wrapper += "*"
	}	

	def params = getInlineProperty("height", heightVal, firstProp)
	firstProp = params.isEmpty()
	params += getInlineProperty("width", widthVal, firstProp)
	firstProp = params.isEmpty()
	params += getInlineProperty("scale", scaleVal, firstProp)

	output << "\\begin{${wrapper}}\n"
	output << "\\centering\n"
	output << "\\includegraphics[${params}]{${imageVal}}\n"
	output << "\\caption{${captionVal}}\n"
	output << "\\end{${wrapper}}\n"

	println output.toString()
	
	if(!outputVal.equals('')){
		FileUtils.writeStringToFile(new File(outputVal), output.toString());
	}

}

task runRscript << {
	// Execute R script
  doCmd(rscriptCmd)		
}

task debugMe << {
  doCmd(debugCmd)
}
